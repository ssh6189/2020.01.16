쿠버네틱스

어제 한게 도커 입문

1년 점프?

도커를 그대로 쓰는 경우는 없다.

(구글 15년전에 개발시작)쿠버테니스에 얹어서 쓴다.

open한지 4~5년 되었다.



pet과 cattle의 차이?

pet은 하나하나 개인적으로 관계를 맺음
cattle은 점으로 보인다.

cattle은 일종의 자산처럼 봄



커머스에서는 설날과 추석이 대목, 항상 트래픽이 올라간다.


ㅁ:구정
ooㅁㅁㅁㅁoo

트래픽이 가장 높아지는 날 : 7일째?

비나, 미세먼지가 많아도, 매출이 높다.

세뱃돈을 받아, 다음날 쓴다.



탄력성 : 외부에서 어떤 힘이 가해졌을때 적응하는것
시스템에서는 트래픽이 올라갔을때, 같이 맞추어 따라가는것

클라우드 나오기 전까지는, 별로 탄력성이 없었다.



2007년 기준
G마켓에 Super Dome 전국 2개
Super Dome : 서버
MSSQL 
항상 하드웨어가 먼저 발전하고, 소프트웨어가 뒤늦게 발전, 하드웨어 활용을 위해
컨설팅 유망직종?


AI 대체불가직업 1순위 : 영업
영업(사람이 알아서 안쓰는것, 소개 안하면, 잘 이용 안하는 재화에 필요)
하다보면, 직군이 바뀔 기회가 온다.



워크로드 : (일반명사) 작업 부하, 아파치 웹서버, 톰캣 등 우리가 실행할 수 있는 모든것
크론 : 주기적인 작업들을 하는것
데몬셋 : (서비스 관점에서 백그라운드에서 보이지 않게 뭔가를 제공하는것, 특징 : 본 서비스가 죽으면, 같이 죽는다.)
디플로이먼트 : 배치
CI/CD : (C:continues, I : Intergration, D:deployment)

CI : 형상관리

Github
코드소스저장소 : 1.백업, 2.히스토리, 3.

1.Github에 잘 저장하는지를 지표로 본다. 꾸준히 올려라 (30%의 개발자)
2.블로그 (1,2%의 개발자?)

어제 코드에서 id는 global을 써야하고, db는 안써도 에러가 안났다. 왜 그런가?

from flask import g
g.id
g.db

블로그에서는 크게 2가지 종류가 있다.
블로그 :
1.트러블 슈팅(장애해결, 에러, 버그 등)
2.tutorial (설명)
3.많이는 안쓴다. 설명(유래, 기원, 교과서적으로)

가장 많이 쓰이는 타입은 1번

1번은 개인개발자들이 많이 쓴다.
100명중의 1~2명이 writer, 대부분은 reader
github와 연동도 가능

jekyll(루비 기반)



조대협의 블로그 (현재 구글)
최신 트렌드 기술만 쓴다.

책을 내면, 이제 이력서가 필요 없다.

좋은 개발자는 신입때 한번 쓰고 안쓴다.

꾸준한게 좋다.

다작이 좋다.

notion?

완성도가 높을 필요는 없다.



Netflix

여러명이 동시에 개발하면,
소스 충돌 발생
충돌->merge->새로운파일
이러한 작업을 CI

이런걸 가지고, 운영 서비스에 투입 및 배치하는것이 CD

GC기반의 언어 : 자바, C#, 고

컨테이너 : 프로세스를 매핑해서 감싼 개념



POD - 데몬셋, 레플리카셋, 티플, 스테이트풀셋

예전에는 펫이었다면, 이제는 캐틀

펫 : 하나가지고 계속 살리는것
캐틀 : 죽으면, 다시 새로운것 가져오는것



다나와 : 상품수 3억
국내 가격비교 사이트 3개 : 에누리 < 다나와 << 네이버

요새는 쇼핑몰도 혼자 살아남을 수 없다.

신흥강자, 중국
알리  EX
40일, 70원짜리 반지?

현재 상품수 : 5억



내결함성 : 장애를 허용하는 시스템
고가용성 : 가용성이 매우 높다. 웬만해서는 잘 안죽는다.

저 강사님은 면접때 항상 L4와 L7차이점을 불어본다.



쿠버네틱스 필요한 이유
운영환경에서의 컨테이너 관리
가동중지 확인
다운되면, 다른 컨테이너 다시 시작
분산 시스템을 탄력적으로 실행
애플리케이션의 확장과 장애 조치
배포패턴 제공(카나리아 배포)

roll out : 하나씩 바꿔서 전부 업데이트



##########쿠버네틱스###########
기능
1.서비스 디스커버리와 로드 밸런싱
2.스토리지 오케스트레이션(여러개의 그룹을 관리)
3.자동화된 롤아웃과롤백
4.자동화된 빈 패킹(bin packing)[각 노드의 상황에 맞도록 채워넣는것]
5.자동화된 복구
6.시크릿과 구성관리

IaaS : EC2, 가상머신
PaaS : 번역API, 지도 검색 API, API를 제공해주는곳이 많다.
SaaS : 우리가 사용하는 모든 웹서비스, dropbox

개발 -> 테스트 -> 배포 -> 운영--ㄱ
 ^                                        l
ㅣ                                        l
 ㄴ----------------------------------l

dentis 모니터링

부스에서 이력서를 받는다?

아키텍쳐

마스터 : 일을하지 않고, 관리만 한다. 일은 워커만
노드 : Kubelet, Docker, Kube-Proxy

실제로는 마스터만 3대 운용

M M M
W W W
 E  E  E


Proxy - 블로그, 카페, 
들어오는 트래픽에 대해서 분기를 해준다.

클랑드 환경에서의 프록시는 리버스 프록시를 의미
(HAproxy, NginX 이 두가지가 리버스프록시로 가장 많이 쓰인다.)



전통적인 모습
app app app
Operating System
Hardware

리소스 한계 정의 불가능
다른 애플리케이션 성능 저하



Virtualized Deployment

App App   	App App
Bin/Library 	Bin/Library
Operating System/Operating System

Hyper visor
Operating System
Hardware

VM 간의 애플리케이션 격리
일정수준의 보안성
리소스 효율적 활용



Container Deployment
app 	app	 app
Bin/LibaryBin/LibaryBin/Libary
Conttainer Runtime
Operating System
Hardware

격리 속성을 완화
애플리케이션 OS공유
자체 파일 시스템, CPU, 메모리, 프로세스 공간 존재
기존 인프라와의 종속성 없음 => 어디에나 이식가능
이미지 불변성 => CI/CD에 적합, 빠르게 롤백가능
개발시점에 이미지 생성하므로, 개발과 운영이 동일
자원격리. App 성능 예측가능

VM에서는 서로다른 운영 체제 사용가능
Containeer Deployment에서는 불가, 그러나, 개발에서는 Linux를 많이 사용하기 때문에 큰 문제 안됨

사이드카 컨테이너 : 작은 컨테이너

YamL
탭, 공백

파드
쿠버네티스의 애플리케이션의 기본 실행 단위
배포 단위
쿠버네티스의 애플리케이션 단일 인스턴스
내부 컨테이너는 1개 (90%dltkddl 1개)
내부 컨테이너 2개이상 (백그라운드 용도 프로세스)
수평적 스케일 아웃
인스턴스를 여러개의 파드로 복제
파드를 직접적으로 사용가능, 그러나 컨트롤러를 사용하여 파드를 관리하는것이 쿠버네티스에서 훨씬 더 보편적

모든 명령어를 Ymal로 내린다.

서비스
레플리카셋
언제든지 지정된 수의 파드 레플리카가 실행중임을 보장
동일 종류의 파드의 셋이 항상 기동되고 사용가능한지 확인
실패하거나 삭제되거나 종료되는 경우 자동으로 교체
프로세스 감시자



디플로이먼트 업데이트
롤 아웃
디플로이먼트의 파드 템플릿이 변경된 경우에만, 디플로이 먼트의 롤아웃이 트리거
디플로이먼트는 업데이트되는 동안 일정한 수의 파드만 중다노디도록 보장, 기본적으로 적어도 의도한 파드수의 75% 이상이 동작하도록 실행

레이블
키와 값의 쌍
